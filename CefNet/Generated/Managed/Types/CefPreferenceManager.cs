// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_preference_manager_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Manage access to preferences. Many built-in preferences are registered by
	/// Chromium. Custom preferences can be registered in
	/// cef_browser_process_handler_t::OnRegisterCustomPreferences.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial class CefPreferenceManager : CefBaseRefCounted<cef_preference_manager_t>
	{
		internal static unsafe CefPreferenceManager Create(IntPtr instance)
		{
			return new CefPreferenceManager((cef_preference_manager_t*)instance);
		}

		public CefPreferenceManager(cef_preference_manager_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		/// <summary>
		/// Returns true (1) if a preference with the specified |name| exists. This
		/// function must be called on the browser process UI thread.
		/// </summary>
		public unsafe virtual bool HasPreference(string name)
		{
			fixed (char* s0 = name)
			{
				var cstr0 = new cef_string_t { Str = s0, Length = name != null ? name.Length : 0 };
				return SafeCall(NativeInstance->HasPreference(&cstr0) != 0);
			}
		}

		/// <summary>
		/// Returns the value for the preference with the specified |name|. Returns
		/// NULL if the preference does not exist. The returned object contains a copy
		/// of the underlying preference value and modifications to the returned
		/// object will not modify the underlying preference value. This function must
		/// be called on the browser process UI thread.
		/// </summary>
		public unsafe virtual CefValue GetPreference(string name)
		{
			fixed (char* s0 = name)
			{
				var cstr0 = new cef_string_t { Str = s0, Length = name != null ? name.Length : 0 };
				return SafeCall(CefValue.Wrap(CefValue.Create, NativeInstance->GetPreference(&cstr0)));
			}
		}

		/// <summary>
		/// Returns all preferences as a dictionary. If |include_defaults| is true (1)
		/// then preferences currently at their default value will be included. The
		/// returned object contains a copy of the underlying preference values and
		/// modifications to the returned object will not modify the underlying
		/// preference values. This function must be called on the browser process UI
		/// thread.
		/// </summary>
		public unsafe virtual CefDictionaryValue GetAllPreferences(bool includeDefaults)
		{
			return SafeCall(CefDictionaryValue.Wrap(CefDictionaryValue.Create, NativeInstance->GetAllPreferences(includeDefaults ? 1 : 0)));
		}

		/// <summary>
		/// Returns true (1) if the preference with the specified |name| can be
		/// modified using SetPreference. As one example preferences set via the
		/// command-line usually cannot be modified. This function must be called on
		/// the browser process UI thread.
		/// </summary>
		public unsafe virtual bool CanSetPreference(string name)
		{
			fixed (char* s0 = name)
			{
				var cstr0 = new cef_string_t { Str = s0, Length = name != null ? name.Length : 0 };
				return SafeCall(NativeInstance->CanSetPreference(&cstr0) != 0);
			}
		}

		/// <summary>
		/// Set the |value| associated with preference |name|. Returns true (1) if the
		/// value is set successfully and false (0) otherwise. If |value| is NULL the
		/// preference will be restored to its default value. If setting the
		/// preference fails then |error| will be populated with a detailed
		/// description of the problem. This function must be called on the browser
		/// process UI thread.
		/// </summary>
		public unsafe virtual bool SetPreference(string name, CefValue value, ref string error)
		{
			fixed (char* s0 = name)
			fixed (char* s2 = error)
			{
				var cstr0 = new cef_string_t { Str = s0, Length = name != null ? name.Length : 0 };
				var cstr2 = new cef_string_t { Str = s2, Length = error != null ? error.Length : 0 };
				var rv = NativeInstance->SetPreference(&cstr0, (value != null) ? value.GetNativeInstance() : null, &cstr2) != 0;
				error = CefString.ReadAndFree(&cstr2);
				GC.KeepAlive(this);
				return rv;
			}
		}
	}
}
