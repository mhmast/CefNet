// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_request_context_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// A request context provides request handling for a set of related browser or
	/// URL request objects. A request context can be specified when creating a new
	/// browser via the cef_browser_host_t static factory functions or when creating
	/// a new URL request via the cef_urlrequest_t static factory functions. Browser
	/// objects with different request contexts will never be hosted in the same
	/// render process. Browser objects with the same request context may or may not
	/// be hosted in the same render process depending on the process model. Browser
	/// objects created indirectly via the JavaScript window.open function or
	/// targeted links will share the same render process and the same request
	/// context as the source browser. When running in single-process mode there is
	/// only a single render process (the main process) and so all browsers created
	/// in single-process mode will share the same request context. This will be the
	/// first request context passed into a cef_browser_host_t static factory
	/// function and all other request context objects will be ignored.
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial struct CefRequestContext
	{
		private cef_request_context_t _instance;

		/// <summary>
		/// Base structure.
		/// </summary>
		public CefPreferenceManager Base
		{
			get
			{
				return _instance.@base;
			}
			set
			{
				_instance.@base = value;
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self, _cef_request_context_t* other)*
		/// </summary>
		public IntPtr IsSame
		{
			get
			{
				return new IntPtr(_instance.is_same);
			}
			set
			{
				_instance.is_same = (void*)value;
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self, _cef_request_context_t* other)*
		/// </summary>
		public IntPtr IsSharingWith
		{
			get
			{
				return new IntPtr(_instance.is_sharing_with);
			}
			set
			{
				_instance.is_sharing_with = (void*)value;
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self)*
		/// </summary>
		public IntPtr IsGlobal
		{
			get
			{
				return new IntPtr(_instance.is_global);
			}
			set
			{
				_instance.is_global = (void*)value;
			}
		}

		/// <summary>
		/// _cef_request_context_handler_t* (*)(_cef_request_context_t* self)*
		/// </summary>
		public IntPtr GetHandler
		{
			get
			{
				return new IntPtr(_instance.get_handler);
			}
			set
			{
				_instance.get_handler = (void*)value;
			}
		}

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_request_context_t* self)*
		/// </summary>
		public IntPtr GetCachePath
		{
			get
			{
				return new IntPtr(_instance.get_cache_path);
			}
			set
			{
				_instance.get_cache_path = (void*)value;
			}
		}

		/// <summary>
		/// _cef_cookie_manager_t* (*)(_cef_request_context_t* self, _cef_completion_callback_t* callback)*
		/// </summary>
		public IntPtr GetCookieManager
		{
			get
			{
				return new IntPtr(_instance.get_cookie_manager);
			}
			set
			{
				_instance.get_cookie_manager = (void*)value;
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self, const cef_string_t* scheme_name, const cef_string_t* domain_name, _cef_scheme_handler_factory_t* factory)*
		/// </summary>
		public IntPtr RegisterSchemeHandlerFactory
		{
			get
			{
				return new IntPtr(_instance.register_scheme_handler_factory);
			}
			set
			{
				_instance.register_scheme_handler_factory = (void*)value;
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self)*
		/// </summary>
		public IntPtr ClearSchemeHandlerFactories
		{
			get
			{
				return new IntPtr(_instance.clear_scheme_handler_factories);
			}
			set
			{
				_instance.clear_scheme_handler_factories = (void*)value;
			}
		}

		/// <summary>
		/// void (*)(_cef_request_context_t* self, _cef_completion_callback_t* callback)*
		/// </summary>
		public IntPtr ClearCertificateExceptions
		{
			get
			{
				return new IntPtr(_instance.clear_certificate_exceptions);
			}
			set
			{
				_instance.clear_certificate_exceptions = (void*)value;
			}
		}

		/// <summary>
		/// void (*)(_cef_request_context_t* self, _cef_completion_callback_t* callback)*
		/// </summary>
		public IntPtr ClearHttpAuthCredentials
		{
			get
			{
				return new IntPtr(_instance.clear_http_auth_credentials);
			}
			set
			{
				_instance.clear_http_auth_credentials = (void*)value;
			}
		}

		/// <summary>
		/// void (*)(_cef_request_context_t* self, _cef_completion_callback_t* callback)*
		/// </summary>
		public IntPtr CloseAllConnections
		{
			get
			{
				return new IntPtr(_instance.close_all_connections);
			}
			set
			{
				_instance.close_all_connections = (void*)value;
			}
		}

		/// <summary>
		/// void (*)(_cef_request_context_t* self, const cef_string_t* origin, _cef_resolve_callback_t* callback)*
		/// </summary>
		public IntPtr ResolveHost
		{
			get
			{
				return new IntPtr(_instance.resolve_host);
			}
			set
			{
				_instance.resolve_host = (void*)value;
			}
		}

		/// <summary>
		/// void (*)(_cef_request_context_t* self, const cef_string_t* root_directory, _cef_dictionary_value_t* manifest, _cef_extension_handler_t* handler)*
		/// </summary>
		public IntPtr LoadExtension
		{
			get
			{
				return new IntPtr(_instance.load_extension);
			}
			set
			{
				_instance.load_extension = (void*)value;
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self, const cef_string_t* extension_id)*
		/// </summary>
		public IntPtr DidLoadExtension
		{
			get
			{
				return new IntPtr(_instance.did_load_extension);
			}
			set
			{
				_instance.did_load_extension = (void*)value;
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self, const cef_string_t* extension_id)*
		/// </summary>
		public IntPtr HasExtension
		{
			get
			{
				return new IntPtr(_instance.has_extension);
			}
			set
			{
				_instance.has_extension = (void*)value;
			}
		}

		/// <summary>
		/// int (*)(_cef_request_context_t* self, cef_string_list_t extension_ids)*
		/// </summary>
		public IntPtr GetExtensions
		{
			get
			{
				return new IntPtr(_instance.get_extensions);
			}
			set
			{
				_instance.get_extensions = (void*)value;
			}
		}

		/// <summary>
		/// _cef_extension_t* (*)(_cef_request_context_t* self, const cef_string_t* extension_id)*
		/// </summary>
		public IntPtr GetExtension
		{
			get
			{
				return new IntPtr(_instance.get_extension);
			}
			set
			{
				_instance.get_extension = (void*)value;
			}
		}

		/// <summary>
		/// _cef_media_router_t* (*)(_cef_request_context_t* self, _cef_completion_callback_t* callback)*
		/// </summary>
		public IntPtr GetMediaRouter
		{
			get
			{
				return new IntPtr(_instance.get_media_router);
			}
			set
			{
				_instance.get_media_router = (void*)value;
			}
		}

		public static implicit operator CefRequestContext(cef_request_context_t instance)
		{
			return new CefRequestContext { _instance = instance };
		}

		public static implicit operator cef_request_context_t(CefRequestContext instance)
		{
			return instance._instance;
		}
	}
}
