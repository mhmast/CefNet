// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_pdf_print_settings_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Structure representing PDF print settings. These values match the parameters
	/// supported by the DevTools Page.printToPDF function. See
	/// https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-printToPDF
	/// </summary>
	/// <remarks>
	/// Role: Proxy
	/// </remarks>
	public unsafe partial struct CefPdfPrintSettings : IDisposable
	{
		private cef_pdf_print_settings_t _instance;

		/// <summary>
		/// Set to true (1) for landscape mode or false (0) for portrait mode.
		/// </summary>
		public bool Landscape
		{
			get
			{
				return _instance.landscape != 0;
			}
			set
			{
				_instance.landscape = value ? 1 : 0;
			}
		}

		/// <summary>
		/// Set to true (1) to print background graphics.
		/// </summary>
		public bool PrintBackground
		{
			get
			{
				return _instance.print_background != 0;
			}
			set
			{
				_instance.print_background = value ? 1 : 0;
			}
		}

		/// <summary>
		/// The percentage to scale the PDF by before printing (e.g. .5 is 50%).
		/// If this value is less than or equal to zero the default value of 1.0
		/// will be used.
		/// </summary>
		public double Scale
		{
			get
			{
				return _instance.scale;
			}
			set
			{
				_instance.scale = value;
			}
		}

		/// <summary>
		/// Output paper size in inches. If either of these values is less than or
		/// equal to zero then the default paper size (letter, 8.5 x 11 inches) will
		/// be used.
		/// </summary>
		public double PaperWidth
		{
			get
			{
				return _instance.paper_width;
			}
			set
			{
				_instance.paper_width = value;
			}
		}

		public double PaperHeight
		{
			get
			{
				return _instance.paper_height;
			}
			set
			{
				_instance.paper_height = value;
			}
		}

		/// <summary>
		/// Set to true (1) to prefer page size as defined by css. Defaults to false
		/// (0), in which case the content will be scaled to fit the paper size.
		/// </summary>
		public bool PreferCssPageSize
		{
			get
			{
				return _instance.prefer_css_page_size != 0;
			}
			set
			{
				_instance.prefer_css_page_size = value ? 1 : 0;
			}
		}

		/// <summary>
		/// Margin type.
		/// </summary>
		public CefPdfPrintMarginType MarginType
		{
			get
			{
				return _instance.margin_type;
			}
			set
			{
				_instance.margin_type = value;
			}
		}

		/// <summary>
		/// Margins in inches. Only used if |margin_type| is set to
		/// PDF_PRINT_MARGIN_CUSTOM.
		/// </summary>
		public double MarginTop
		{
			get
			{
				return _instance.margin_top;
			}
			set
			{
				_instance.margin_top = value;
			}
		}

		public double MarginRight
		{
			get
			{
				return _instance.margin_right;
			}
			set
			{
				_instance.margin_right = value;
			}
		}

		public double MarginBottom
		{
			get
			{
				return _instance.margin_bottom;
			}
			set
			{
				_instance.margin_bottom = value;
			}
		}

		public double MarginLeft
		{
			get
			{
				return _instance.margin_left;
			}
			set
			{
				_instance.margin_left = value;
			}
		}

		/// <summary>
		/// Paper ranges to print, one based, e.g., &apos;1-5, 8, 11-13&apos;. Pages are printed
		/// in the document order, not in the order specified, and no more than once.
		/// Defaults to empty string, which implies the entire document is printed.
		/// The page numbers are quietly capped to actual page count of the document,
		/// and ranges beyond the end of the document are ignored. If this results in
		/// no pages to print, an error is reported. It is an error to specify a range
		/// with start greater than end.
		/// </summary>
		public string PageRanges
		{
			get
			{
				fixed (cef_string_t* s = &_instance.page_ranges)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.page_ranges)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// Set to true (1) to display the header and/or footer. Modify
		/// |header_template| and/or |footer_template| to customize the display.
		/// </summary>
		public bool DisplayHeaderFooter
		{
			get
			{
				return _instance.display_header_footer != 0;
			}
			set
			{
				_instance.display_header_footer = value ? 1 : 0;
			}
		}

		/// <summary>
		/// HTML template for the print header. Only displayed if
		/// |display_header_footer| is true (1). Should be valid HTML markup with
		/// the following classes used to inject printing values into them:
		/// - date: formatted print date
		/// - title: document title
		/// - url: document location
		/// - pageNumber: current page number
		/// - totalPages: total pages in the document
		/// For example, &quot;&lt;span class=title&gt;&lt;/span&gt;&quot; would generate a span containing
		/// the title.
		/// </summary>
		public string HeaderTemplate
		{
			get
			{
				fixed (cef_string_t* s = &_instance.header_template)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.header_template)
				{
					CefString.Replace(s, value);
				}
			}
		}

		/// <summary>
		/// HTML template for the print footer. Only displayed if
		/// |display_header_footer| is true (1). Uses the same format as
		/// |header_template|.
		/// </summary>
		public string FooterTemplate
		{
			get
			{
				fixed (cef_string_t* s = &_instance.footer_template)
				{
					return CefString.Read(s);
				}
			}
			set
			{
				fixed (cef_string_t* s = &_instance.footer_template)
				{
					CefString.Replace(s, value);
				}
			}
		}

		public void Dispose()
		{
			PageRanges = null;
			HeaderTemplate = null;
			FooterTemplate = null;
		}

		public static implicit operator CefPdfPrintSettings(cef_pdf_print_settings_t instance)
		{
			return new CefPdfPrintSettings { _instance = instance };
		}

		public static implicit operator cef_pdf_print_settings_t(CefPdfPrintSettings instance)
		{
			return instance._instance;
		}
	}
}
