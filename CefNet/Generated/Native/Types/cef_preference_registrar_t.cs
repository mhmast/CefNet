// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_preference_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure that manages custom preference registrations.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_preference_registrar_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_scoped_t @base;

		/// <summary>
		/// int (*)(_cef_preference_registrar_t* self, const cef_string_t* name, _cef_value_t* default_value)*
		/// </summary>
		public void* add_preference;

		/// <summary>
		/// Register a preference with the specified |name| and |default_value|. To
		/// avoid conflicts with built-in preferences the |name| value should contain
		/// an application-specific prefix followed by a period (e.g. &quot;myapp.value&quot;).
		/// The contents of |default_value| will be copied. The data type for the
		/// preference will be inferred from |default_value|&apos;s type and cannot be
		/// changed after registration. Returns true (1) on success. Returns false (0)
		/// if |name| is already registered or if |default_value| has an invalid type.
		/// This function must be called from within the scope of the
		/// cef_browser_process_handler_t::OnRegisterCustomPreferences callback.
		/// </summary>
		[NativeName("add_preference")]
		public unsafe int AddPreference([Immutable]cef_string_t* name, cef_value_t* default_value)
		{
			fixed (cef_preference_registrar_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_preference_registrar_t*, cef_string_t*, cef_value_t*, int>)add_preference)(self, name, default_value);
			}
		}
	}
}

