// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_browser_process_handler_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure used to implement browser process callbacks. The functions of this
	/// structure will be called on the browser process main thread unless otherwise
	/// indicated.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_browser_process_handler_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// void (*)(_cef_browser_process_handler_t* self, cef_preferences_type_t type, _cef_preference_registrar_t* registrar)*
		/// </summary>
		public void* on_register_custom_preferences;

		/// <summary>
		/// Provides an opportunity to register custom preferences prior to global and
		/// request context initialization.
		/// If |type| is CEF_PREFERENCES_TYPE_GLOBAL the registered preferences can be
		/// accessed via cef_preference_manager_t::GetGlobalPreferences after
		/// OnContextInitialized is called. Global preferences are registered a single
		/// time at application startup. See related cef_settings_t.cache_path and
		/// cef_settings_t.persist_user_preferences configuration.
		/// If |type| is CEF_PREFERENCES_TYPE_REQUEST_CONTEXT the preferences can be
		/// accessed via the cef_request_context_t after
		/// cef_request_context_handler_t::OnRequestContextInitialized is called.
		/// Request context preferences are registered each time a new
		/// cef_request_context_t is created. It is intended but not required that all
		/// request contexts have the same registered preferences. See related
		/// cef_request_context_settings_t.cache_path and
		/// cef_request_context_settings_t.persist_user_preferences configuration.
		/// Do not keep a reference to the |registrar| object. This function is called
		/// on the browser process UI thread.
		/// </summary>
		[NativeName("on_register_custom_preferences")]
		public unsafe void OnRegisterCustomPreferences(CefPreferencesType type, cef_preference_registrar_t* registrar)
		{
			fixed (cef_browser_process_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_browser_process_handler_t*, CefPreferencesType, cef_preference_registrar_t*, void>)on_register_custom_preferences)(self, type, registrar);
			}
		}

		/// <summary>
		/// void (*)(_cef_browser_process_handler_t* self)*
		/// </summary>
		public void* on_context_initialized;

		/// <summary>
		/// Called on the browser process UI thread immediately after the CEF context
		/// has been initialized.
		/// </summary>
		[NativeName("on_context_initialized")]
		public unsafe void OnContextInitialized()
		{
			fixed (cef_browser_process_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_browser_process_handler_t*, void>)on_context_initialized)(self);
			}
		}

		/// <summary>
		/// void (*)(_cef_browser_process_handler_t* self, _cef_command_line_t* command_line)*
		/// </summary>
		public void* on_before_child_process_launch;

		/// <summary>
		/// Called before a child process is launched. Will be called on the browser
		/// process UI thread when launching a render process and on the browser
		/// process IO thread when launching a GPU process. Provides an opportunity to
		/// modify the child process command line. Do not keep a reference to
		/// |command_line| outside of this function.
		/// </summary>
		[NativeName("on_before_child_process_launch")]
		public unsafe void OnBeforeChildProcessLaunch(cef_command_line_t* command_line)
		{
			fixed (cef_browser_process_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_browser_process_handler_t*, cef_command_line_t*, void>)on_before_child_process_launch)(self, command_line);
			}
		}

		/// <summary>
		/// void (*)(_cef_browser_process_handler_t* self, int64 delay_ms)*
		/// </summary>
		public void* on_schedule_message_pump_work;

		/// <summary>
		/// Called from any thread when work has been scheduled for the browser
		/// process main (UI) thread. This callback is used in combination with
		/// cef_settings_t.external_message_pump and cef_do_message_loop_work() in
		/// cases where the CEF message loop must be integrated into an existing
		/// application message loop (see additional comments and warnings on
		/// CefDoMessageLoopWork). This callback should schedule a
		/// cef_do_message_loop_work() call to happen on the main (UI) thread.
		/// |delay_ms| is the requested delay in milliseconds. If |delay_ms| is 
		/// &lt;
		/// = 0
		/// then the call should happen reasonably soon. If |delay_ms| is &gt; 0 then the
		/// call should be scheduled to happen after the specified delay and any
		/// currently pending scheduled call should be cancelled.
		/// </summary>
		[NativeName("on_schedule_message_pump_work")]
		public unsafe void OnScheduleMessagePumpWork(long delay_ms)
		{
			fixed (cef_browser_process_handler_t* self = &this)
			{
				((delegate* unmanaged[Stdcall]<cef_browser_process_handler_t*, long, void>)on_schedule_message_pump_work)(self, delay_ms);
			}
		}

		/// <summary>
		/// _cef_client_t* (*)(_cef_browser_process_handler_t* self)*
		/// </summary>
		public void* get_default_client;

		/// <summary>
		/// Return the default client for use with a newly created browser window. If
		/// null is returned the browser will be unmanaged (no callbacks will be
		/// executed for that browser) and application shutdown will be blocked until
		/// the browser window is closed manually. This function is currently only
		/// used with the chrome runtime.
		/// </summary>
		[NativeName("get_default_client")]
		public unsafe cef_client_t* GetDefaultClient()
		{
			fixed (cef_browser_process_handler_t* self = &this)
			{
				return ((delegate* unmanaged[Stdcall]<cef_browser_process_handler_t*, cef_client_t*>)get_default_client)(self);
			}
		}
	}
}

